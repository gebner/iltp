%==============================================================================
%----Code to do syntactic examination of TPTP files.
%==============================================================================
%==============================================================================
%----Recognition of tptp syntax
%==============================================================================
%------------------------------------------------------------------------------
%----Recognise and split up quantified formulae
%----FOF syntax, only in tptp mode
tptp_quantified_formula(QuantifiedFormula,Quantifier,Variables,Formula):-
    QuantifiedFormula =.. [:,Quantification,Formula],
    !,
    Quantification =.. [Quantifier,Variables],
    tptp2X_member(Quantifier,['!','?','^']).

oldtptp_quantified_formula(QuantifiedFormula,Quantifier,Variables,Formula):-
    tptp_quantified_formula(QuantifiedFormula,Quantifier,Variables,Formula).
%------------------------------------------------------------------------------
%----Recognise and split up binary formulae
%----Converting from the Prolog syntax to FOF syntax
tptp_binary_formula(BinaryFormula,BinaryConnective,LHS,RHS):-
%----Do the member first to get instantiated variables for backward use
%----Will backtrack until it finds the right connective. 
    tptp2X_member(OldBinaryConnective-BinaryConnective,[
%----Double \\ for SICStus and old syntax. TO BE REMOVED LATER.
%---- '\\/'-'|',    '\\~/'-'~|',    '/\\'-'&',    '/~\\'-'~&',
%----|;BUG
'|'-'|',     ';'-'|',     '~|'-'~|',    '&'-'&',     '~&'-'~&',   
'=>'-'=>',   '<='-'<=',   '<=>'-'<=>', '<~>'-'<~>']),
    BinaryFormula =.. [OldBinaryConnective,LHS,RHS].

oldtptp_binary_formula(BinaryFormula,BinaryConnective,LHS,RHS):-
    tptp_binary_formula(BinaryFormula,BinaryConnective,LHS,RHS).
%------------------------------------------------------------------------------
%----Recognise and split up unary formulae
tptp_unary_formula(UnaryFormula,UnaryConnective,Formula):-
    UnaryFormula =.. [UnaryConnective,Formula],
    tptp2X_member(UnaryConnective,[~]).

oldtptp_unary_formula(UnaryFormula,UnaryConnective,Formula):-
    tptp_unary_formula(UnaryFormula,UnaryConnective,Formula).
%------------------------------------------------------------------------------
%----Recognize non-atomic formulae
tptp_non_atomic_formula(Formula):-
    tptp_quantified_formula(Formula,_,_,_).

tptp_non_atomic_formula(Formula):-
    tptp_binary_formula(Formula,_,_,_).

tptp_non_atomic_formula(Formula):-
    tptp_unary_formula(Formula,_,_).
%------------------------------------------------------------------------------
%----Recognize atomic formulae
tptp_atomic_formula(AtomicFormula):-
    \+ tptp_non_atomic_formula(AtomicFormula).
%------------------------------------------------------------------------------
%----Recognize literal formulae
tptp_literal_formula(~Atom,Atom):-
    tptp_atomic_formula(Atom).

tptp_literal_formula(Atom,Atom):-
    tptp_atomic_formula(Atom).
%------------------------------------------------------------------------------
%----Check that it is a list of clauses
tptp_clauses([]).

tptp_clauses([input_clause(_,_,_)|RestOfClauses]):-
    tptp_clauses(RestOfClauses).
%------------------------------------------------------------------------------
%----Check that it is a list of formulae
tptp_formulae([]).

tptp_formulae([fof(_,_,_)|RestOfFormulae]):-
    tptp_formulae(RestOfFormulae).

tptp_formulae([thof(_,_,_)|RestOfFormulae]):-
    tptp_formulae(RestOfFormulae).
%------------------------------------------------------------------------------
%----Check that it is a list of tstp formulae
tstp_clauses([]).

tstp_clauses([Formula|RestOfFormulae]):-
    Formula =.. [cnf|_],
    tstp_formulae(RestOfFormulae).
%------------------------------------------------------------------------------
%----Check that it is a list of tstp formulae
tstp_formulae([]).

tstp_formulae([Formula|RestOfFormulae]):-
    Formula =.. [Language|_],
    tptp2X_member(Language,[cnf,fof]),
    tstp_formulae(RestOfFormulae).
%------------------------------------------------------------------------------
tptp_clause_like(Literal):-
    tptp_literal_formula(Literal,_),
    !.

tptp_clause_like(RHS '|' LHS):-
    tptp_clause_like(RHS),
    tptp_clause_like(LHS).
%------------------------------------------------------------------------------
tptp_clause_like_formulae([]).

tptp_clause_like_formulae([fof(_,_,Formula)|RestOfFormulae]):-
write(Formula),nl,
    tptp_clause_like(Formula),
    tptp_clause_like_formulae(RestOfFormulae).
%------------------------------------------------------------------------------
%----Check if non-propositional 
%----CNF case
tptp_non_propositional(Clauses):-
%----Extract any atom
    tptp2X_member(input_clause(_,_,Literals),Clauses),
    tptp2X_member(Literal,Literals),
    Literal =.. [_,Atom],
%----Check that the atom has an argument
    Atom =.. [_,_|_],
    !.

%----FOF case
tptp_non_propositional(Formulae):-
%----Look at formulae one at a time, to avoid extracting all atoms
%----unnecessarily
    tptp2X_member(AnnotatedFormula,Formulae),
    extract_atoms_from_formulae([AnnotatedFormula],_,_,Atoms),
    tptp2X_member(Atom,Atoms),
    Atom =.. [_,_|_],
    !.
%------------------------------------------------------------------------------
%----Check if propositional
tptp_propositional(Formulae):-
    \+ tptp_non_propositional(Formulae).
%------------------------------------------------------------------------------
%----Check formula is in TPTP normal form
%----conjectures are safe so far
tptp_normal_formula(fof(_,conjecture,_)):-
    !.

%tptp_normal_formula(fof(Name,_,_ & _)):-
%    !,
%    write('%----ERROR : Top level & in '),
%    write(Name),
%    nl,
%    fail.

tptp_normal_formula(fof(Name,Status,forall(_,Formula))):-
    !,
    tptp_normal_formula(fof(Name,Status,Formula)).

tptp_normal_formula(fof(Name,Status,!(_,Formula))):-
    !,
    tptp_normal_formula(fof(Name,Status,Formula)).

tptp_normal_formula(_).
%------------------------------------------------------------------------------
%----Check the formulae are in TPTP normal form
tptp_normal_formulae([]).

tptp_normal_formulae([FirstFormula|RestOfFormulae]):-
    tptp_normal_formula(FirstFormula),
    tptp_normal_formulae(RestOfFormulae).
%------------------------------------------------------------------------------
%======================================================================
%----Syntax procedures
%======================================================================
%------------------------------------------------------------------------------
%----Keep each variable in the list. This is the first time it's appeared
do_tptp2X_syntax_extract_variables(Variable,[Variable]):-
    looks_like_a_variable(Variable),
    !.

%----If an atomic term is found, then ignore it.
do_tptp2X_syntax_extract_variables(Term,[]):-
    atomic(Term),
    !.

%----If a list, then do head and tail
do_tptp2X_syntax_extract_variables([Head|Tail],Variables):-
    !,
    do_tptp2X_syntax_extract_variables(Head,Variables1),
    do_tptp2X_syntax_extract_variables(Tail,Variables2),
    tptp2X_append(Variables1,Variables2,Variables).

%----Otherwise, it must be a function term. Pull it apart and do
%----the arguments one by one.
do_tptp2X_syntax_extract_variables(Function,Variables):-
    Function =.. [_|Arguments],
    do_tptp2X_syntax_extract_variables(Arguments,Variables).
%------------------------------------------------------------------------------
extract_unique_variables([],UniqueVariables,UniqueVariables).

extract_unique_variables([FirstVariable|RestOfVariables],UniqueSoFar,
UniqueVariables):-
    tptp2X_exact_member(FirstVariable,UniqueSoFar),
    !,
    extract_unique_variables(RestOfVariables,UniqueSoFar,UniqueVariables).

extract_unique_variables([FirstVariable|RestOfVariables],UniqueSoFar,
UniqueVariables):-
    extract_unique_variables(RestOfVariables,[FirstVariable|UniqueSoFar],
UniqueVariables).
%------------------------------------------------------------------------------
tptp2X_syntax_extract_variables(Term,Variables,UniqueVariables):-
    do_tptp2X_syntax_extract_variables(Term,Variables),
    extract_unique_variables(Variables,[],UniqueVariables).
%------------------------------------------------------------------------------
%----Measure the maximum depth of functor nesting in the term
tptp2X_syntax_term_depth(Variable,1):-
    var(Variable),
    !.

tptp2X_syntax_term_depth([],0):-
    !.

tptp2X_syntax_term_depth([First|Rest],Depth):-
    !,
    tptp2X_syntax_term_depth(First,FirstDepth),
    tptp2X_syntax_term_depth(Rest,RestDepth),
    tptp2X_choose_maximum(FirstDepth,RestDepth,Depth).

tptp2X_syntax_term_depth(Term,Depth):-
    Term =.. [_|Arguments],
    tptp2X_syntax_term_depth(Arguments,ArgumentDepth),
    Depth is ArgumentDepth + 1.
%------------------------------------------------------------------------------
%----Measure the depth of a formula
tptp2X_syntax_formula_depth(QuantifiedFormula,Depth):-
    tptp_quantified_formula(QuantifiedFormula,_,Variables,Formula),
    !,
    tptp2X_syntax_formula_depth(Formula,FormulaDepth),
    tptp2X_length(Variables,MoreDepth),
    Depth is FormulaDepth + MoreDepth.

tptp2X_syntax_formula_depth(BinaryFormula,Depth):-
    tptp_binary_formula(BinaryFormula,_,LHS,RHS),
    !,
    tptp2X_syntax_formula_depth(LHS,LHSDepth),
    tptp2X_syntax_formula_depth(RHS,RHSDepth),
    tptp2X_choose_maximum(LHSDepth,RHSDepth,MaximumDepth),
    Depth is MaximumDepth + 1.

tptp2X_syntax_formula_depth(UnaryFormula,Depth):-
    tptp_unary_formula(UnaryFormula,_,Formula),
    !,
    tptp2X_syntax_formula_depth(Formula,FormulaDepth),
    Depth is FormulaDepth + 1.

tptp2X_syntax_formula_depth(AtomicFormula,1):-
    tptp_atomic_formula(AtomicFormula).
%------------------------------------------------------------------------------
%----Count the number of occurences of each type of connective in a
%----formula
%----NOT
count_formula_connectives(~ Formula,CountVector):-
    count_formula_connectives(Formula,FormulaCountVector),
    tptp2X_list_add(FormulaCountVector,[1,0,0,0,0,0,0,0,0,0,0],CountVector).

%----OR
count_formula_connectives(';'(LHS,RHS),CountVector):-
%----To avoid confusion with |
    !,
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,ORCountVector),
    tptp2X_list_add(ORCountVector,[0,1,0,0,0,0,0,0,0,0,0],CountVector).

%----|;BUG
count_formula_connectives('|'(LHS,RHS),CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,ORCountVector),
    tptp2X_list_add(ORCountVector,[0,1,0,0,0,0,0,0,0,0,0],CountVector).

%----AND
count_formula_connectives(LHS & RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,ANDCountVector),
    tptp2X_list_add(ANDCountVector,[0,0,1,0,0,0,0,0,0,0,0],CountVector).

%----IMPLY
count_formula_connectives(LHS => RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,IMPLYCountVector),
    tptp2X_list_add(IMPLYCountVector,[0,0,0,1,0,0,0,0,0,0,0],CountVector).

%----IMPLIED
count_formula_connectives(LHS <= RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,IMPLIEDCountVector),
    tptp2X_list_add(IMPLIEDCountVector,[0,0,0,0,1,0,0,0,0,0,0],CountVector).

%----EQUIV
count_formula_connectives(LHS <=> RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,EQUIVCountVector),
    tptp2X_list_add(EQUIVCountVector,[0,0,0,0,0,1,0,0,0,0,0],CountVector).

%----XOR
count_formula_connectives(LHS <~> RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,XORCountVector),
    tptp2X_list_add(XORCountVector,[0,0,0,0,0,0,1,0,0,0,0],CountVector).

%----NOR
count_formula_connectives(LHS '~|' RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,NORCountVector),
    tptp2X_list_add(NORCountVector,[0,0,0,0,0,0,0,1,0,0,0],CountVector).

%----NAND
count_formula_connectives(LHS ~& RHS,CountVector):-
    count_formula_connectives(LHS,LHSCountVector),
    count_formula_connectives(RHS,RHSCountVector),
    tptp2X_list_add(LHSCountVector,RHSCountVector,NANDCountVector),
    tptp2X_list_add(NANDCountVector,[0,0,0,0,0,0,0,0,1,0,0],CountVector).

%----Universals
count_formula_connectives(! Variables : Formula,CountVector):-
    count_formula_connectives(Formula,FormulaCountVector),
    tptp2X_length(Variables,NumberOfVariables),
    tptp2X_list_add(FormulaCountVector,[0,0,0,0,0,0,0,0,0,NumberOfVariables,0],
CountVector).

%----Existentials
count_formula_connectives(? Variables : Formula,CountVector):-
    count_formula_connectives(Formula,FormulaCountVector),
    tptp2X_length(Variables,NumberOfVariables),
    tptp2X_list_add(FormulaCountVector,[0,0,0,0,0,0,0,0,0,0,NumberOfVariables],
CountVector).

%----Lambdas 
count_formula_connectives(^ Variables : Formula,CountVector):-
    count_formula_connectives(Formula,FormulaCountVector),
    tptp2X_length(Variables,NumberOfVariables),
    tptp2X_list_add(FormulaCountVector,[0,0,0,0,0,0,0,0,0,0,NumberOfVariables],
CountVector).

%----Atomic formulae
count_formula_connectives(Atom,[0,0,0,0,0,0,0,0,0,0,0]):-
    tptp_atomic_formula(Atom).
%------------------------------------------------------------------------------
%----Count the number of occurences of each type of connective in a
%----list of formulae
count_formulae_connectives([],[0,0,0,0,0,0,0,0,0,0,0]).

count_formulae_connectives([AnnotatedFormula|RestOfFormulae],CountVector):-
    AnnotatedFormula =.. [_,_,_,FirstFormula|_],
    count_formula_connectives(FirstFormula,FirstVector),
    count_formulae_connectives(RestOfFormulae,RestVector),
    tptp2X_list_add(FirstVector,RestVector,CountVector).
%------------------------------------------------------------------------------
%======================================================================
%----Pulling clauses apart code
%======================================================================
%------------------------------------------------------------------------------
%----Extract all the arguments from the literals
extract_arguments_from_literals([],[]):-
    !.

extract_arguments_from_literals([FirstLiteral|RestOfLiterals],Arguments):-
    extract_arguments_from_literals(RestOfLiterals,RestOfArguments),
    FirstLiteral =.. [_,Atom],
    Atom =.. [_|ArgumentList],
    tptp2X_append(ArgumentList,RestOfArguments,Arguments).
%------------------------------------------------------------------------------
%----Extract all the arguments from atoms
extract_arguments_from_atoms([],[]):-
    !.

extract_arguments_from_atoms([FirstAtom|RestOfAtoms],Arguments):-
    extract_arguments_from_atoms(RestOfAtoms,RestOfArguments),
    FirstAtom =.. [_|ArgumentList],
    tptp2X_append(ArgumentList,RestOfArguments,Arguments).
%------------------------------------------------------------------------------
%----Filter a list of literals for those with certain properties
filter_literals([],_,_,_,[]).

%----Case that the literal meets the requirements
filter_literals([FirstLiteral|RestOfLiterals],Sign,PredicateSymbol,Arity,
[FirstLiteral|RestOfFilteredLiterals]):-
%----Verify to avoid instantiations if variables
    \+ \+ (FirstLiteral =.. [Sign,Atom],
           \+ (Atom = $_),
           functor(Atom,PredicateSymbol,Arity)),
    !,
    filter_literals(RestOfLiterals,Sign,PredicateSymbol,Arity,
RestOfFilteredLiterals).

%----Case that the literal does not meet the requirements
filter_literals([_|RestOfLiterals],Sign,PredicateSymbol,Arity,
FilteredLiterals):-
    filter_literals(RestOfLiterals,Sign,PredicateSymbol,Arity,
FilteredLiterals).
%------------------------------------------------------------------------------
%----Extract all the literals from the clauses, subject to the sign,
%----predicate symbol and arity.
extract_literals_from_clauses([],_,_,_,[]).

extract_literals_from_clauses([input_clause(_,_,ClauseLiterals)|
RestOfClauses],Sign,PredicateSymbol,Arity,Literals):-
    filter_literals(ClauseLiterals,Sign,PredicateSymbol,Arity,FilteredLiterals),
    extract_literals_from_clauses(RestOfClauses,Sign,PredicateSymbol,Arity,
RestOfFilteredLiterals),
    tptp2X_append(FilteredLiterals,RestOfFilteredLiterals,Literals).
%------------------------------------------------------------------------------
%----Given a formula, extract an atom
extract_atom_from_formula(QuantifiedFormula,Atom):-
    tptp_quantified_formula(QuantifiedFormula,_,_,Formula),
    !,
    extract_atom_from_formula(Formula,Atom).

extract_atom_from_formula(BinaryFormula,Atom):-
    tptp_binary_formula(BinaryFormula,_,LHS,_),
%----Cannot cut here as this is backtracked over in 
%----extract_atoms_from_formulae
    extract_atom_from_formula(LHS,Atom).

extract_atom_from_formula(BinaryFormula,Atom):-
    tptp_binary_formula(BinaryFormula,_,_,RHS),
    !,
    extract_atom_from_formula(RHS,Atom).

extract_atom_from_formula(UnaryFormula,Atom):-
    tptp_unary_formula(UnaryFormula,_,Formula),
    !,
    extract_atom_from_formula(Formula,Atom).

extract_atom_from_formula(Atom,Atom):-
    tptp_atomic_formula(Atom),
    \+ (Atom = $_).
%------------------------------------------------------------------------------
%----Extract all the atoms from the formulae, subject to the predicate 
%----symbol and arity.
extract_atoms_from_formulae(Formulae,PredicateSymbol,Arity,Atoms):-
    findall(Atom,
        (   tptp2X_member(AnnotatedFormula,Formulae),
            AnnotatedFormula =.. [Language,_,_,Formula|_],
            tptp2X_member(Language,[cnf,fof]),
            extract_atom_from_formula(Formula,Atom),
            functor(Atom,PredicateSymbol,Arity)),
        Atoms).
%------------------------------------------------------------------------------
%----Get the functor details of a term
%----Integer term
extract_typed_functor_structure(Integer,Integer/0):-
    integer(Integer),
    !.

%----Function term
extract_typed_functor_structure(Function,Functor/Arity):-
    functor(Function,Functor,Arity).

%----Get the functor details from the arguments of a function term
extract_typed_functor_structure(Function,FunctorStructure):-
%----Extract the arguments of the function
    Function =.. [_|FunctionArguments],
%----Get functor details from these terms
    extract_functor_structure(FunctionArguments,FunctorStructure).
%------------------------------------------------------------------------------
%----Check that a term looks like a variable
looks_like_a_variable(Variable):-
    var(Variable).

looks_like_a_variable(Something):-
    nonvar(Something),
    Something =.. ['$VAR',_].

looks_like_a_variable(AtomVariable):-
    nonvar(AtomVariable),
    atom(AtomVariable),
    name(AtomVariable,[FirstASCII|_]),
    FirstASCII >= 65,
    FirstASCII =< 90.
%------------------------------------------------------------------------------
%----Extract any functor structure from a list of terms
extract_functor_structure(Terms,FunctorStructure):-
    tptp2X_member(Term,Terms),
    \+ looks_like_a_variable(Term),
    extract_typed_functor_structure(Term,FunctorStructure).
%------------------------------------------------------------------------------
%----Given a list of signed structures, make unsigned ones
extract_unsigned_structure(PredicateStructures,Symbol/Arity):-
    tptp2X_member(Structure,PredicateStructures),
    Structure =.. [_,Symbol/Arity].
%------------------------------------------------------------------------------
%----Given a list of literals, make signed structure
extract_signed_structure_from_literals(Literals,SignedStructure):-
    tptp2X_member(Literal,Literals),
    Literal =.. [Sign,Atom],
    functor(Atom,Symbol,Arity),
    SignedStructure =.. [Sign,Symbol/Arity].
%------------------------------------------------------------------------------
%----Given a list of atoms, make unsigned structure
extract_unsigned_structure_from_atoms(Atoms,Symbol/Arity):-
    tptp2X_member(Atom,Atoms),
    functor(Atom,Symbol,Arity).
%------------------------------------------------------------------------------
%----Collect all predicate symbols
%----Empty case
examine_formulae_for_predicates([],[],[],[]):-
    !.

%----CNF case
examine_formulae_for_predicates(Clauses,PredicateStructures,
UnsignedPredicateStructures,PredicateSymbols):-
    tptp_clauses(Clauses),
    extract_literals_from_clauses(Clauses,_,_,_,Literals),
%DEBUG statistics(times,T2),write('% about to extract_signed_structure_from_literals '),write(T2),nl,
    tptp2X_setof1(Structure,
        extract_signed_structure_from_literals(Literals,Structure),
        PredicateStructures),
%DEBUG statistics(times,T3),write('% about to extract_unsigned_structure '),write(T3),nl,
    tptp2X_setof1(UnsignedStructure,
        extract_unsigned_structure(PredicateStructures,UnsignedStructure),
        UnsignedPredicateStructures),
    tptp2X_findall_setof1(PredicateSymbol,
        tptp2X_member(PredicateSymbol/_,UnsignedPredicateStructures),
        PredicateSymbols).

%----FOF case
examine_formulae_for_predicates(Formulae,[],UnsignedPredicateStructures,
PredicateSymbols):-
    tptp_formulae(Formulae),
    extract_atoms_from_formulae(Formulae,_,_,Atoms),
    tptp2X_findall_setof1(UnsignedStructure,
        extract_unsigned_structure_from_atoms(Atoms,UnsignedStructure),
        UnsignedPredicateStructures),
    tptp2X_findall_setof1(PredicateSymbol,
        tptp2X_member(PredicateSymbol/_,UnsignedPredicateStructures),
        PredicateSymbols).
%------------------------------------------------------------------------------
%----Collect all functors
%----Empty case
examine_formulae_for_functors([],[],[]):-
    !.

%----CNF case
examine_formulae_for_functors(Clauses,FunctorStructures,Functors):-
    tptp_clauses(Clauses),
    extract_literals_from_clauses(Clauses,_,_,_,Literals),
    extract_arguments_from_literals(Literals,Arguments),
    tptp2X_findall_setof1(FunctorStructure,extract_functor_structure(
Arguments,FunctorStructure),FunctorStructures),
    tptp2X_findall_setof1(Functor,tptp2X_member(Functor/_,
FunctorStructures),Functors).

%----FOF case
examine_formulae_for_functors(Formulae,FunctorStructures,Functors):-
    tptp_formulae(Formulae),
    extract_atoms_from_formulae(Formulae,_,_,Atoms),
    extract_arguments_from_atoms(Atoms,Arguments),
    tptp2X_findall_setof1(FunctorStructure,extract_functor_structure(
Arguments,FunctorStructure),FunctorStructures),
    tptp2X_findall_setof1(Functor,tptp2X_member(Functor/_,
FunctorStructures),Functors).
%------------------------------------------------------------------------------
%======================================================================
%----Syntactic examination code
%======================================================================
%------------------------------------------------------------------------------
%----Count the number of structures with a given arity
count_structures_of_arity([],_,0):-
    !.

count_structures_of_arity([_/Arity|RestOfStructures],Arity,
Number):-
    !,
    count_structures_of_arity(RestOfStructures,Arity,RestNumber),
    Number is RestNumber + 1.

count_structures_of_arity([_|RestOfStructures],Arity,Number):-
    count_structures_of_arity(RestOfStructures,Arity,Number).
%------------------------------------------------------------------------------
%----Find minimal and maximal arities
tptp2X_arity_range([],MinimalArity,MaximalArity,MinimalArity,
MaximalArity).

%----Less than minimal so far
tptp2X_arity_range([_/Arity|RestOfStructures],MinimalAritySoFar,
MaximalAritySoFar,MinimalArity,MaximalArity):-
    Arity < MinimalAritySoFar,
    !,
    tptp2X_arity_range(RestOfStructures,Arity,MaximalAritySoFar,
MinimalArity,MaximalArity).

%----Greater than maximal so far
tptp2X_arity_range([_/Arity|RestOfStructures],MinimalAritySoFar,
MaximalAritySoFar,MinimalArity,MaximalArity):-
    Arity > MaximalAritySoFar,
    !,
    tptp2X_arity_range(RestOfStructures,MinimalAritySoFar,Arity,
MinimalArity,MaximalArity).

%----In current range
tptp2X_arity_range([_|RestOfStructures],MinimalAritySoFar,
MaximalAritySoFar,MinimalArity,MaximalArity):-
    tptp2X_arity_range(RestOfStructures,MinimalAritySoFar,
MaximalAritySoFar,MinimalArity,MaximalArity).
%------------------------------------------------------------------------------
%----Find minimal and maximal arities
%----If no structures, then return -
tptp2X_arity_range([],'-','-').

tptp2X_arity_range([_/Arity|RestOfStructures],MinimalArity,MaximalArity):-
    tptp2X_arity_range(RestOfStructures,Arity,Arity,MinimalArity,
MaximalArity).
%------------------------------------------------------------------------------
%----Check that the number of literals is in range. This needs special
%----treatment, due to Prolog's poor number handling
check_length_range(ClauseLiterals,MinimumLength,MaximumLength):-
    tptp2X_length(ClauseLiterals,Length),
    (integer(MinimumLength) ->
        Length >= MinimumLength
    ;   true),
    (integer(MaximumLength) ->
        Length =< MaximumLength
    ;   true).
%------------------------------------------------------------------------------
%----Extract clauses of given name, status, and length range
extract_clauses_from_input_set(AllClauses,Name,Status,MinimumLength,
MaximumLength,Clauses):-
    findall(input_clause(Name,Status,ClauseLiterals),
        (   tptp2X_member(input_clause(Name,Status,ClauseLiterals),
AllClauses),
            check_length_range(ClauseLiterals,MinimumLength,MaximumLength)),
        Clauses).
%------------------------------------------------------------------------------
%----Count the number of input clauses of a given length
count_clauses_of_length(Clauses,Length,Number):-
    extract_clauses_from_input_set(Clauses,_,_,Length,Length,
ClausesOfLength),
    tptp2X_length(ClausesOfLength,Number).
%------------------------------------------------------------------------------
%----Count the number of literals in the input clauses with a given
%----predicate symbol
count_literals_with_predicate(Clauses,PredicateSymbol,Arity,Number):-
    extract_literals_from_clauses(Clauses,_,PredicateSymbol,Arity,
Literals),
    tptp2X_length(Literals,Number).
%------------------------------------------------------------------------------
%----Extract top level arguments of atoms
%----CNF case
extract_arguments_of_atoms(Clauses,Arguments):-
    tptp_clauses(Clauses),
    extract_literals_from_clauses(Clauses,_,_,_,Literals),
    extract_arguments_from_literals(Literals,Arguments).
 
%----FOF case
extract_arguments_of_atoms(Formulae,Arguments):-
    tptp_formulae(Formulae),
    extract_atoms_from_formulae(Formulae,_,_,Atoms),
    extract_arguments_from_atoms(Atoms,Arguments).
%------------------------------------------------------------------------------
%----Look for the maximum depth of any term (CNF and FOF)
term_depth_values(Formulae,MaximalTermDepth,AverageTermDepth):-
    extract_arguments_of_atoms(Formulae,Arguments),
    findall(Depth,
%----Select an argument
        (   tptp2X_member(Argument,Arguments),
%----Get its depth
            tptp2X_syntax_term_depth(Argument,Depth)),
        AllDepths),
    tptp2X_maximal_in_list(AllDepths,MaximalTermDepth),
    tptp2X_arithmetic_average(AllDepths,AverageTermDepth).
%------------------------------------------------------------------------------
%----Find the clause with the most literals and count
clause_size_values([],0,0):-
    !.

clause_size_values(AllClauses,MaximalClauseSize,AverageClauseSize):-
    findall(ClauseSize,
%----Select an input clause and get its length
        (   tptp2X_member(input_clause(_,_,Literals),AllClauses),
            tptp2X_length(Literals,ClauseSize)),
        AllClauseSizes),
    tptp2X_maximal_in_list(AllClauseSizes,MaximalClauseSize),
    tptp2X_arithmetic_average(AllClauseSizes,AverageClauseSize).
%------------------------------------------------------------------------------
%----FOF formula depth values
formulae_depth_values([],0,0).

formulae_depth_values(Formulae,MaximalFormulaDepth,AverageFormulaDepth):-
    findall(FormulaDepth,
%----Select an input clause and get its length
        (   tptp2X_member(fof(_,_,Formula),Formulae),
            tptp2X_syntax_formula_depth(Formula,FormulaDepth)),
        AllFormulaDepths),
    tptp2X_maximal_in_list(AllFormulaDepths,MaximalFormulaDepth),
    tptp2X_arithmetic_average(AllFormulaDepths,AverageFormulaDepth).
%------------------------------------------------------------------------------
%----Extract a singleton numbervarsed variable from a list of vars
extract_singleton_variables(Variables,Singletons):-
    findall(Singleton,
        (   tptp2X_select(Singleton,Variables,RestOfVariables),
            \+ tptp2X_member(Singleton,RestOfVariables)
        ),Singletons).
%------------------------------------------------------------------------------
%----Check if the formula variables are quantified, and note that quantified
%----variables have been used
check_quantifications([],_,ExcessQuantifiedVariables,
ExcessQuantifiedVariables,[]).

check_quantifications([FirstFormulaVariable|RestOfFormulaVariables],
VariablesQuantifiedSoFar,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeVariables):-
%----Check it's not a free variable
    tptp2X_member(QuantifiedVariable,VariablesQuantifiedSoFar),
    QuantifiedVariable == FirstFormulaVariable,
    !,
%----Note that it has been used, if necessary
    ((tptp2X_select(ExcessVariable,ExcessQuantifiedSoFar,
OtherExcessQuantifiedSoFar),
      ExcessVariable == QuantifiedVariable) ->
        true
    ;   OtherExcessQuantifiedSoFar = ExcessQuantifiedSoFar),
%----Move on to next
    check_quantifications(RestOfFormulaVariables,VariablesQuantifiedSoFar,
OtherExcessQuantifiedSoFar,ExcessQuantifiedVariables,FreeVariables).

%----Damn, it's a free variable
check_quantifications([FirstFormulaVariable|RestOfFormulaVariables],
VariablesQuantifiedSoFar,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
[FirstFormulaVariable|RestOfFreeVariables]):-
    check_quantifications(RestOfFormulaVariables,VariablesQuantifiedSoFar,
ExcessQuantifiedSoFar,ExcessQuantifiedVariables,RestOfFreeVariables).
%------------------------------------------------------------------------------
seperate_types_from_variables([],[],[]).

seperate_types_from_variables([FirstVariable|RestOfTypedVariables],
[FirstVariable|RestOfVariables],Types):-
    var(FirstVariable),
    !,
    seperate_types_from_variables(RestOfTypedVariables,RestOfVariables,Types).

seperate_types_from_variables([FirstVariable:FirstType|RestOfTypedVariables],
[FirstVariable|RestOfVariables],[FirstType|RestOfTypes]):-
    !,
    seperate_types_from_variables(RestOfTypedVariables,RestOfVariables,
RestOfTypes).
%------------------------------------------------------------------------------
%----Parse formula for variables, checking quantification
parse_formula_for_variables(QuantifiedFormula,VariablesQuantifiedSoFar,
AllQuantifiedVariables,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeVariables):-
    tptp_quantified_formula(QuantifiedFormula,_,QuantifiedVariablesWithTypes,
Formula),
    seperate_types_from_variables(QuantifiedVariablesWithTypes,
QuantifiedVariables,Types),
    replace_variable_list(QuantifiedVariables,Formula,NewQuantifiedVariables,
ReplacedFormula),
    !,
    tptp2X_append(VariablesQuantifiedSoFar,NewQuantifiedVariables,
NewVariablesQuantifiedSoFar),
    tptp2X_append(ExcessQuantifiedSoFar,NewQuantifiedVariables,
NewExcessQuantifiedSoFar),
    parse_formula_for_variables(Types,NewVariablesQuantifiedSoFar,
TypeVariables,NewExcessQuantifiedSoFar,NextExcessQuantifiedSoFar,
FreeTypeVariables),
    parse_formula_for_variables(ReplacedFormula,NewVariablesQuantifiedSoFar,
FormulaQuantifiedVariables,NextExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeFormulaVariables),
    tptp2X_append(NewQuantifiedVariables,TypeVariables,MoreQuantifiedVariables),
    tptp2X_append(MoreQuantifiedVariables,FormulaQuantifiedVariables,
AllQuantifiedVariables),
    tptp2X_append(FreeTypeVariables,FreeFormulaVariables,FreeVariables).

parse_formula_for_variables(BinaryFormula,VariablesQuantifiedSoFar,
AllQuantifiedVariables,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeVariables):-
    tptp_binary_formula(BinaryFormula,_,LHS,RHS),
    !,
    parse_formula_for_variables(LHS,VariablesQuantifiedSoFar,
LHSQuantifiedVariables,ExcessQuantifiedSoFar,LHSExcessQuantifiedSoFar,
LHSFreeVariables),
    parse_formula_for_variables(RHS,VariablesQuantifiedSoFar,
RHSQuantifiedVariables,LHSExcessQuantifiedSoFar,ExcessQuantifiedVariables,
RHSFreeVariables),
    tptp2X_append(LHSFreeVariables,RHSFreeVariables,FreeVariables),
    tptp2X_append(LHSQuantifiedVariables,RHSQuantifiedVariables,
AllQuantifiedVariables).

parse_formula_for_variables(UnaryFormula,VariablesQuantifiedSoFar,
QuantifiedVariables,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeVariables):-
    tptp_unary_formula(UnaryFormula,_,Formula),
    !,
    parse_formula_for_variables(Formula,VariablesQuantifiedSoFar,
QuantifiedVariables,ExcessQuantifiedSoFar,ExcessQuantifiedVariables,
FreeVariables).

parse_formula_for_variables(AtomicFormula,VariablesQuantifiedSoFar,Variables,
ExcessQuantifiedSoFar,ExcessQuantifiedVariables,FreeVariables):-
    tptp2X_syntax_extract_variables(AtomicFormula,Variables,_),
    check_quantifications(Variables,VariablesQuantifiedSoFar,
ExcessQuantifiedSoFar,ExcessQuantifiedVariables,FreeVariables).
%------------------------------------------------------------------------------
%----Report bad variables if there are any
report_bad_variables(_,[],_):-
    !.

report_bad_variables(Message,Variables,FormulaName):-
    write('WARNING: '),
    write(Message),
    write(' in '),
    write(FormulaName),
    write(': '),
    write(Variables),
    nl.
%------------------------------------------------------------------------------
%----Parse list of formulae for variables
parse_formulae_for_variables([],[]).

parse_formulae_for_variables([AnnotatedFormula|RestOfFormulae],
QuantifiedVariables):-
    AnnotatedFormula =.. [_,Name,_,FirstFormula|_],
    parse_formula_for_variables(FirstFormula,[],FirstQuantifiedVariables,
[],ExcessQuantifiedVariables,FreeVariables),
    report_bad_variables('Excess quantified variables',
ExcessQuantifiedVariables,Name),
    report_bad_variables('Free variables',FreeVariables,Name),
%----Do rest of formulae and append the result
    parse_formulae_for_variables(RestOfFormulae,RestOfQuantifiedVariables),
    tptp2X_append(FirstQuantifiedVariables,RestOfQuantifiedVariables,
QuantifiedVariables).
%------------------------------------------------------------------------------
%----Extract variables from clauses or formulae
%----For clauses just hack on in
extract_formulae_variables(Clauses,Variables):-
    tptp_clauses(Clauses),
    !,
    tptp2X_syntax_extract_variables(Clauses,Variables,_).

%----For FOF check that quantified variables occur, then discard
extract_formulae_variables(Formulae,Variables):-
    tptp_formulae(Formulae),
    !,
    parse_formulae_for_variables(Formulae,Variables).
%------------------------------------------------------------------------------
%----Count the number of singleton variables in the clauses
count_number_of_variables(Formulae,NumberOfVariables,NumberOfSingletons):-
%----Copy so that I can use numbervars to count them
    tptp2X_copy(Formulae,CopyOfFormulae),
%DEBUG statistics(times,T2),write('% about to extract_formulae_variables '),write(T2),nl,
    extract_formulae_variables(CopyOfFormulae,Variables),
%DEBUG statistics(times,T3),write('% about to numbervars '),write(T3),nl,
    numbervars(Variables,0,NumberOfVariables),
%DEBUG statistics(times,T4),write('% about to findall '),write(T4),nl,
    extract_singleton_variables(Variables,Singletons),
%DEBUG statistics(times,T5),write('% about to tptp2X_length '),write(T5),nl,
    tptp2X_length(Singletons,NumberOfSingletons).
%------------------------------------------------------------------------------
%----Separate out the positive and negative literals
split_literals_by_sign([],[],[]):-
    !.

split_literals_by_sign([++Atom|RestOfLiterals],[++Atom|
RestOfPositive],Negative):-
    split_literals_by_sign(RestOfLiterals,RestOfPositive,Negative).

split_literals_by_sign([--Atom|RestOfLiterals],Positive,[--Atom|
RestOfNegative]):-
    split_literals_by_sign(RestOfLiterals,Positive,
RestOfNegative).
%------------------------------------------------------------------------------
%----Check if a clause is range restricted
range_restricted(Literals):-
    split_literals_by_sign(Literals,Positive,Negative),
%----Verify to avoid instantiation by numbervars
    \+ \+ (
        numbervars(Negative,0,N),
        numbervars(Positive,N,N)).
%------------------------------------------------------------------------------
%----Count number of range-restricted clauses
count_number_of_range_restricted_clauses([],0):-
    !.

count_number_of_range_restricted_clauses([input_clause(_,_,Literals)|
RestOfClauses],Number):-
    range_restricted(Literals),
    !,
    count_number_of_range_restricted_clauses(RestOfClauses,
RestNumber),
    Number is RestNumber + 1.

count_number_of_range_restricted_clauses([_|RestOfClauses],
Number):-
    count_number_of_range_restricted_clauses(RestOfClauses,Number).
%------------------------------------------------------------------------------
%----Count the number of Horn and non-Horn clauses in the input set
determine_horn_status([],0-0):-
    !.

determine_horn_status([input_clause(_,_,Literals)|RestOfClauses],
NumberOfHornClauses-NewNumberOfNonHornClauses):-
%----Determine non-Horn status by looking for a clause with two 
%----positive literals
    tptp2X_select(++_,Literals,OtherLiterals),
    tptp2X_member(++_,OtherLiterals),
    !,
    determine_horn_status(RestOfClauses,NumberOfHornClauses-
NumberOfNonHornClauses),
    NewNumberOfNonHornClauses is NumberOfNonHornClauses + 1.

%----If not non-Horn, then must be Horn
determine_horn_status([_|RestOfClauses],
NewNumberOfHornClauses-NumberOfNonHornClauses):-
    determine_horn_status(RestOfClauses,NumberOfHornClauses-
NumberOfNonHornClauses),
    NewNumberOfHornClauses is NumberOfHornClauses + 1.
%------------------------------------------------------------------------------
%----Count number of unit formulae (has a single atom)
count_unit_formulae(InputFormulae,NumberOfUnitFormulae):-
    findall(InputFormula,
        (   tptp2X_member(InputFormula,InputFormulae),
%----Check the formula has a single atom. THIS ASSUMES tptp CONNECTIVES
%----at the moment
            extract_atoms_from_formulae([InputFormula],_,_,[_])),
        UnitFormulae),
    tptp2X_length(UnitFormulae,NumberOfUnitFormulae).
%------------------------------------------------------------------------------
%----Do the syntactic examination of the input set
%----Empty case assumes clauses. May not be true, of course. AAARGH.
examine_input_syntactics([],
%----These are the output values
['CLSS'-0,'NNHN'-0,'UNIT'-0,'RARE'-0,'LITS'-0,'EQLS'-0,'CLSZ'-0,'CLAS'-0,
 'PRED'-0,'PROP'-0,'MINP'-0,'MAXP'-0,'FUNC'-0,'CNST'-0,'MINF'-0,'MAXF'-0,
 'VARS'-0,'SGTN'-0,'TMDP'-0,'TMAD'-0]):-
    !.

%----CNF case
examine_input_syntactics(Clauses,
%----These are the output values
['CLSS'-NumberOfClauses,'NNHN'-NumberOfNonHornClauses,
 'UNIT'-NumberOfUnitClauses,'RARE'-NumberOfRangeRestrictedClauses,
 'LITS'-NumberOfLiterals,'EQLS'-NumberOfEqualityLiterals,
 'CLSZ'-MaximalClauseSize,'CLAS'-AverageClauseSize,
 'PRED'-NumberOfPredicateSymbols,'PROP'-NumberOfPropositions,
 'MINP'-MinimalPredicateArity,'MAXP'-MaximalPredicateArity,
 'FUNC'-NumberOfFunctors,'CNST'-NumberOfConstants,
 'MINF'-MinimalFunctorArity,'MAXF'-MaximalFunctorArity,
 'VARS'-NumberOfVariables,'SGTN'-NumberOfSingletons,
 'TMDP'-MaximalTermDepth,'TMAD'-AverageTermDepth]):-
%----Check it contains clauses
    tptp_clauses(Clauses),
    !,
%----Do basic syntactic examination
    examine_formulae_for_predicates(Clauses,_,UnsignedPredicateStructures,_),
    examine_formulae_for_functors(Clauses,FunctorStructures,_),
%----Do more detailed exmaination for TPTP
%----Number of clauses
    tptp2X_length(Clauses,NumberOfClauses),
%----Number of non-Horn clauses
    determine_horn_status(Clauses,_-NumberOfNonHornClauses),
%----Number of unit clauses
    count_clauses_of_length(Clauses,1,NumberOfUnitClauses),
%----Number of range restricted clauses
    count_number_of_range_restricted_clauses(Clauses,
NumberOfRangeRestrictedClauses),
%----Number of literals
    count_literals_with_predicate(Clauses,_,_,NumberOfLiterals),
%----Number of equality literals
    count_literals_with_predicate(Clauses,equal,2,NumberOfEqualityLiterals),
%----Maximal clause size and arithmetic_average clause size
    clause_size_values(Clauses,MaximalClauseSize,AverageClauseSize),
%----Number of predicate symbols
    tptp2X_length(UnsignedPredicateStructures,NumberOfPredicateSymbols),
%----Number of propositions
    count_structures_of_arity(UnsignedPredicateStructures,0,
NumberOfPropositions),
%----Range of predicate arities
    tptp2X_arity_range(UnsignedPredicateStructures,MinimalPredicateArity,
MaximalPredicateArity),
%----Number of functors
    tptp2X_length(FunctorStructures,NumberOfFunctors),
%----Number of constants
    count_structures_of_arity(FunctorStructures,0,NumberOfConstants),
%----Range of functor arities
    tptp2X_arity_range(FunctorStructures,MinimalFunctorArity,
MaximalFunctorArity),
%----Number of variables and singletons BEWARE THIS INSTANTIATES
    count_number_of_variables(Clauses,NumberOfVariables,
NumberOfSingletons),
%----Maximal and arithmetic_average term depth
    term_depth_values(Clauses,MaximalTermDepth,AverageTermDepth).

%----FOF case
examine_input_syntactics(Formulae,
%----These are the output values
['FORM'-NumberOfFormulae,'UNIT'-NumberOfUnitFormulae,
 'ATOM'-NumberOfAtoms,'EQAT'-NumberOfEqualityAtoms,
 'FMDP'-MaximalFormulaDepth,'FMAD'-AverageFormulaDepth,
 'CONN'-NumberOfConnectives,
 'NOTS'-NumberOfNOTs,'ORSS'-NumberOfORs,'ANDS'-NumberOfANDs,
 'IMPS'-NumberOfIMPLYs,'PMIS'-NumberOfIMPLIEDs,'EQVS'-NumberOfEQUIVs,
 'XORS'-NumberOfXORs,'NORS'-NumberOfNORs,'NANS'-NumberOfNANDs,
 'PRED'-NumberOfPredicateSymbols,'PROP'-NumberOfPropositions,
 'MINP'-MinimalPredicateArity,'MAXP'-MaximalPredicateArity,
 'FUNC'-NumberOfFunctors,'CNST'-NumberOfConstants,
 'MINF'-MinimalFunctorArity,'MAXF'-MaximalFunctorArity,
 'VARS'-NumberOfVariables,'SGTN'-NumberOfSingletons,
 'UNIV'-NumberOfUniversals,'EXIS'-NumberOfExistentials,
 'TMDP'-MaximalTermDepth,'TMAD'-AverageTermDepth]):-
%----Check it contains formulae
    tptp_formulae(Formulae),
    !,
%----Do basic syntactic examination
    examine_formulae_for_predicates(Formulae,_,UnsignedPredicateStructures,_),
    examine_formulae_for_functors(Formulae,FunctorStructures,_),
%----Number of formulae
    tptp2X_length(Formulae,NumberOfFormulae),
%----Number of unit formulae
    count_unit_formulae(Formulae,NumberOfUnitFormulae),
%----Number of atoms
    extract_atoms_from_formulae(Formulae,_,_,Atoms),
    tptp2X_length(Atoms,NumberOfAtoms),
%----Number of equality atoms
    extract_atoms_from_formulae(Formulae,equal,2,EqualityAtoms),
    tptp2X_length(EqualityAtoms,NumberOfEqualityAtoms),
%----Maximal and arithmetic_average formula depth
    formulae_depth_values(Formulae,MaximalFormulaDepth,AverageFormulaDepth),
%----Number of each type of connective
    count_formulae_connectives(Formulae,[NumberOfNOTs,NumberOfORs,
NumberOfANDs,NumberOfIMPLYs,NumberOfIMPLIEDs,NumberOfEQUIVs,NumberOfXORs,
NumberOfNORs,NumberOfNANDs,NumberOfUniversals,NumberOfExistentials]),
    NumberOfConnectives is NumberOfNOTs + NumberOfORs + NumberOfANDs + 
NumberOfIMPLYs + NumberOfIMPLIEDs + NumberOfEQUIVs + NumberOfXORs + 
NumberOfNORs + NumberOfNANDs,
%----Number of predicate symbols
    tptp2X_length(UnsignedPredicateStructures,NumberOfPredicateSymbols),
%----Number of propositions
    count_structures_of_arity(UnsignedPredicateStructures,0,
NumberOfPropositions),
%----Range of predicate arities
    tptp2X_arity_range(UnsignedPredicateStructures,MinimalPredicateArity,
MaximalPredicateArity),
%----Number of functors
    tptp2X_length(FunctorStructures,NumberOfFunctors),
%----Number of constants
    count_structures_of_arity(FunctorStructures,0,NumberOfConstants),
%----Range of functor arities
    tptp2X_arity_range(FunctorStructures,MinimalFunctorArity,
MaximalFunctorArity),
%----Number of variables and singletons BEWARE THIS INSTANTIATES????
    count_number_of_variables(Formulae,NumberOfVariables,
NumberOfSingletons),
%----Maximal and arithmetic_average term depth
    term_depth_values(Formulae,MaximalTermDepth,AverageTermDepth).
%------------------------------------------------------------------------------
convert_literal_to_tptp(--Atom,~ Atom).

convert_literal_to_tptp(++Atom,Atom).
%------------------------------------------------------------------------------
%----TSTP conversion procedures
convert_literals_to_tptp([],$(false)):-
    !.

convert_literals_to_tptp([Literal],Formula):-
    !,
    convert_literal_to_tptp(Literal,Formula).

convert_literals_to_tptp([FirstLiteral|RestOfLiterals],
(LHS| RestOfFormula)):-
    !,
    convert_literal_to_tptp(FirstLiteral,LHS),
    convert_literals_to_tptp(RestOfLiterals,RestOfFormula).
%------------------------------------------------------------------------------
convert_clauses_to_tptp([],[]).

convert_clauses_to_tptp([input_clause(Name,Status,Literals)|RestOfClauses],
[cnf(Name,Status,Formula)|RestOfTSTP]):-
    convert_literals_to_tptp(Literals,Formula),
    convert_clauses_to_tptp(RestOfClauses,RestOfTSTP).
%------------------------------------------------------------------------------
%----In the future this will expand things to long format
convert_formulae_to_tptp(A,A).
%------------------------------------------------------------------------------
%----TSTP conversion procedures
convert_tptp_to_literals([FirstLiteral|RestOfLiterals],[FirstLiteral|
RestOfLiterals]):-
    !.

%----Have to quote the '|' for SICStus
convert_tptp_to_literals(LHS '|' RHS,Literals):-
    !,
    convert_tptp_to_literals(LHS,LHSLiterals),
    convert_tptp_to_literals(RHS,RHSLiterals),
    tptp2X_append(LHSLiterals,RHSLiterals,Literals).

%convert_tptp_to_literals($(false),[]):-
%    !.
%
%convert_tptp_to_literals(~ $(true),[]):-
%    !.

convert_tptp_to_literals(~ Atom,[--Atom]):-
    !.

convert_tptp_to_literals(Atom,[++Atom]).
%------------------------------------------------------------------------------
